eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgdGVzdHM6CiAgICBpbWFnZTogbm9kZTo3LjMKICAgIGNvbW1hbmRzOgogICAgICAtIG5wbSBpbnN0YWxsIC1nIHlhcm4KICAgICAgLSB5YXJuCiAgICAgIC0geWFybiBydW4gbGludAogICAgICAtIHlhcm4gcnVuIGJ1aWxkCiAgICB3aGVuOgogICAgICBldmVudDogcHVzaAogICAgICBicmFuY2g6CiAgICAgICAgZXhjbHVkZTogWyBtYXN0ZXIsIGRldmVsb3BtZW50IF0KCiAgZGV2ZWxvcG1lbnQ6CiAgICBpbWFnZTogbm9kZTo3LjMKICAgIGVudmlyb25tZW50OgogICAgICAtIE5PREVfRU5WPWRldmVsb3BtZW50CiAgICBjb21tYW5kczoKICAgICAgLSBucG0gaW5zdGFsbCAtZyB5YXJuCiAgICAgIC0geWFybgogICAgICAtIC4vbm9kZV9tb2R1bGVzLy5iaW4vd2VicGFjawogICAgICAtIHJtIC1yZiAvd2ViLyoKICAgICAgLSBjcCAtdnIgLi9kaXN0Ly4gL3dlYgogICAgICAtIGNwIC12ciAuL3B1YmxpYy8uIC93ZWIKICAgIHZvbHVtZXM6CiAgICAgIC0gL3Zhci93d3cvaHRtbC9vbmtpYm90L2RldmVsb3BtZW50Oi93ZWIKICAgIHdoZW46CiAgICAgIGJyYW5jaDogZGV2ZWxvcG1lbnQKICAgICAgZXZlbnQ6IHB1c2gKCiAgcHJvZHVjdGlvbjoKICAgIGltYWdlOiBub2RlOjcuMwogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gTk9ERV9FTlY9cHJvZHVjdGlvbgogICAgY29tbWFuZHM6CiAgICAgIC0gbnBtIGluc3RhbGwgLWcgeWFybgogICAgICAtIHlhcm4KICAgICAgLSAuL25vZGVfbW9kdWxlcy8uYmluL3dlYnBhY2sKICAgICAgLSBybSAtcmYgL3dlYi8qCiAgICAgIC0gY3AgLXZyIC4vZGlzdC8uIC93ZWIKICAgICAgLSBjcCAtdnIgLi9wdWJsaWMvLiAvd2ViCiAgICB2b2x1bWVzOgogICAgICAtIC92YXIvd3d3L2h0bWwvb25raWJvdC9tYXN0ZXI6L3dlYgogICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKICAgICAgZXZlbnQ6IHRhZwoKCg.ODznKHEL2iMA7FhakAmROMHk6nxFrZHtXgMlqAZyIWQ