eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgdGVzdHM6CiAgICBpbWFnZTogbm9kZTo3LjMKICAgIGNvbW1hbmRzOgogICAgICAtIG5wbSBpbnN0YWxsIC1nIHlhcm4KICAgICAgLSB5YXJuCiAgICAgIC0gLi9ub2RlX21vZHVsZXMvLmJpbi93ZWJwYWNrCiAgICB3aGVuOgogICAgICBicmFuY2g6CiAgICAgICAgZXhjbHVkZTogWyBtYXN0ZXIsIGRldmVsb3BtZW50IF0KCiAgZGV2ZWxvcG1lbnQ6CiAgICBpbWFnZTogbm9kZTo3LjMKICAgIGVudmlyb25tZW50OgogICAgICAtIE5PREVfRU5WPWRldmVsb3BtZW50CiAgICBjb21tYW5kczoKICAgICAgLSBucG0gaW5zdGFsbCAtZyB5YXJuCiAgICAgIC0geWFybgogICAgICAtIC4vbm9kZV9tb2R1bGVzLy5iaW4vd2VicGFjawogICAgICAtIHJtIC1yZiAvd2ViLyoKICAgICAgLSBjcCAtdnIgLi9kaXN0Ly4gL3dlYgogICAgICAtIGNwIC12ciAuL3B1YmxpYy8uIC93ZWIKICAgIHZvbHVtZXM6CiAgICAgIC0gL3Zhci93d3cvaHRtbC9vbmtpYm90L2RldmVsb3BtZW50Oi93ZWIKICAgIHdoZW46CiAgICAgIGJyYW5jaDogZGV2ZWxvcG1lbnQKICAgICAgZXZlbnQ6IHB1bGxfcmVxdWVzdAoKICBwcm9kdWN0aW9uOgogICAgaW1hZ2U6IG5vZGU6Ny4zCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBOT0RFX0VOVj1wcm9kdWN0aW9uCiAgICBjb21tYW5kczoKICAgICAgLSBucG0gaW5zdGFsbCAtZyB5YXJuCiAgICAgIC0geWFybgogICAgICAtIC4vbm9kZV9tb2R1bGVzLy5iaW4vd2VicGFjawogICAgICAtIHJtIC1yZiAvd2ViLyoKICAgICAgLSBjcCAtdnIgLi9kaXN0Ly4gL3dlYgogICAgICAtIGNwIC12ciAuL3B1YmxpYy8uIC93ZWIKICAgIHZvbHVtZXM6CiAgICAgIC0gL3Zhci93d3cvaHRtbC9vbmtpYm90L21hc3Rlcjovd2ViCiAgICB3aGVuOgogICAgICBicmFuY2g6IG1hc3RlcgogICAgICBldmVudDogdGFnCgoK.z1vFuYLTfC4baNsrAiY-Q-CyM9nSy4RP6USLwVvYygI